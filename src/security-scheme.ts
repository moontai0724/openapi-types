import type { Extendable } from "./_extendable";
import type { OAuthFlowsObject } from "./oauth-flows";

interface BaseSecuritySchemeObject extends Extendable {
  /**
   * The type of the security scheme. Valid values are `"apiKey"`, `"http"`, `"mutualTLS"`, `"oauth2"`, `"openIdConnect"`.
   */
  type: "apiKey" | "http" | "mutualTLS" | "oauth2" | "openIdConnect";
  /**
   * A description for security scheme. [CommonMark syntax](https://spec.commonmark.org/) _MAY_ be used for rich text representation.
   */
  description?: string;
}

export interface SecuritySchemeObjectApiKey extends BaseSecuritySchemeObject {
  type: "apiKey";
  /**
   * The name of the header, query or cookie parameter to be used.
   */
  name: string;
  /**
   * The location of the API key. Valid values are `"query"`, `"header"` or `"cookie"`.
   */
  in: "query" | "header" | "cookie";
}

export interface SecuritySchemeObjectHttp extends BaseSecuritySchemeObject {
  type: "http";
  /**
   * The name of the HTTP Authorization scheme to be used in the Authorization header as defined in \[[RFC7235](https://spec.openapis.org/oas/latest.html#bib-RFC7235)\]. The values used _SHOULD_ be registered in the [IANA Authentication Scheme registry](https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml).
   */
  scheme: string;
}

export interface SecuritySchemeObjectHttpBearer
  extends SecuritySchemeObjectHttp {
  type: "http";
  scheme: "bearer" | "Bearer";
  /**
   * A hint to the client to identify how the bearer token is formatted. Bearer tokens are usually generated by an authorization server, so this information is primarily for documentation purposes.
   */
  bearerFormat?: string;
}

export interface SecuritySchemeObjectMutualTLS
  extends BaseSecuritySchemeObject {
  type: "mutualTLS";
}

export interface SecuritySchemeObjectOAuth2 extends BaseSecuritySchemeObject {
  type: "oauth2";
  /**
   * An object containing configuration information for the flow types supported.
   */
  flows: Record<string, OAuthFlowsObject>;
}

export interface SecuritySchemeObjectOpenIdConnect
  extends BaseSecuritySchemeObject {
  type: "openIdConnect";
  /**
   * OpenId Connect URL to discover OAuth2 configuration values. This _MUST_ be in the form of a URL. The OpenID Connect standard requires the use of TLS.
   */
  openIdConnectUrl: string;
}

/**
 * Defines a security scheme that can be used by the operations.
 *
 * Supported schemes are HTTP authentication, an API key (either as a header, a cookie parameter or as a query parameter), mutual TLS (use of a client certificate), OAuth2â€™s common flows (implicit, password, client credentials and authorization code) as defined in \[[RFC6749](https://spec.openapis.org/oas/latest.html#bib-RFC6749)\], and [OpenID Connect Discovery](https://tools.ietf.org/html/draft-ietf-oauth-discovery-06). Please note that as of 2020, the implicit flow is about to be deprecated by [OAuth 2.0 Security Best Current Practice](https://tools.ietf.org/html/draft-ietf-oauth-security-topics). Recommended for most use case is Authorization Code Grant flow with PKCE.
 *
 * @see https://spec.openapis.org/oas/latest.html#security-scheme-object
 */
export type SecuritySchemeObject =
  | SecuritySchemeObjectApiKey
  | SecuritySchemeObjectHttp
  | SecuritySchemeObjectHttpBearer
  | SecuritySchemeObjectMutualTLS
  | SecuritySchemeObjectOAuth2
  | SecuritySchemeObjectOpenIdConnect;
